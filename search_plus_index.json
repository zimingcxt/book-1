{"./":{"url":"./","title":"前言","keywords":"","body":"我的第一本书 本书介绍:没什么用的GitHub page... 里面包含怎么部署这个静态个人书籍的方式(ai生成的,尽量理解). "},"chapter1/":{"url":"chapter1/","title":"第一章：入门","keywords":"","body":"第一章：入门 "},"chapter1/section1.html":{"url":"chapter1/section1.html","title":"第一节：基本概念","keywords":"","body":"第一节：基本概念 HonKit 部署 GitHub Pages 的基本概念 使用 HonKit 将你的文档或书籍部署到 GitHub Pages 是一种非常流行且有效的方式，因为它能让你免费托管你的内容，并与版本控制系统 GitHub 紧密集成。 1. HonKit 是什么？ HonKit 是一个静态网站生成器，特别适用于创建文档、技术书籍和在线手册。它的核心功能是将用 Markdown 语言编写的内容文件，转换为结构清晰、易于导航的静态 HTML 网站。你可以把它想象成一个“Markdown 编译器”，帮你把零散的 Markdown 文件组织成一个漂亮的网站。 2. GitHub Pages 是什么？ GitHub Pages 是 GitHub 提供的一项免费服务，允许你直接从 GitHub 仓库托管静态网站。这意味着你无需购买域名或租赁服务器，就可以把你的 HTML、CSS 和 JavaScript 文件部署到互联网上。 GitHub Pages 主要有两种类型： 用户/组织页面 (User/Organization Pages)： 针对个人用户或组织的唯一网站，仓库名必须是 你的用户名.github.io（例如 yourname.github.io）。访问地址通常是 https://yourname.github.io。每个用户或组织只能有一个这样的页面。 项目页面 (Project Pages)： 针对 GitHub 上的某个具体项目。仓库名可以是任意的（例如 my-project）。访问地址通常是 https://yourname.github.io/my-project。你可以为每个项目都创建一个项目页面。 3. HonKit 如何与 GitHub Pages 协同工作？ HonKit 和 GitHub Pages 的结合，可以概括为以下几个步骤： Markdown 内容创建： 你在本地使用 Markdown 语法编写你的文档或书籍内容。所有内容都存储在你的 HonKit 项目文件夹中（例如 README.md、chapter1.md 等）。 HonKit 构建网站： 当你运行 honkit build 命令时，HonKit 会读取你的 Markdown 文件和 book.json 配置（包括目录结构 SUMMARY.md、插件等），然后将它们编译生成一系列静态 HTML、CSS 和 JavaScript 文件。这些生成的文件会存储在一个名为 _book 的文件夹中。 Git 版本控制： 你的 HonKit 项目（包括 Markdown 源文件、book.json、_book 文件夹等）通过 Git 进行版本控制。 推送到 GitHub 仓库： 你将本地的 HonKit 项目（特别是 _book 文件夹中的内容）推送到你的 GitHub 仓库。 GitHub Pages 托管： 在 GitHub 仓库的 \"Settings\" -> \"Pages\" 中，你将 GitHub Pages 的来源设置为包含你网站内容的特定分支和目录（通常是 main 分支的 /root 目录，因为 _book 文件夹就是网站的根目录）。GitHub Pages 收到这些文件后，就会将其托管，并通过一个公共 URL 提供访问。 4. 核心工作流程 部署一个 HonKit 网站到 GitHub Pages 的基本流程如下： 本地 HonKit 项目： honkit init：初始化项目，生成 README.md 和 SUMMARY.md。 编写 Markdown 内容。 配置 book.json（主题、插件、元数据等）。 npm install：安装 book.json 中配置的任何插件。 honkit serve：本地预览你的网站。 honkit build：生成最终的静态网站文件，它们会放在 _book 文件夹中。 Git & GitHub 仓库： 在 GitHub 上创建一个新的仓库（例如 yourname.github.io 用于用户页面，或 my-project-docs 用于项目页面）。 将你的 HonKit 项目（包括 _book 文件夹）初始化为 Git 仓库并推送到 GitHub。git init git add . git commit -m \"First HonKit build\" git branch -M main # 确保分支名为 main 或 master git remote add origin https://github.com/你的用户名/你的仓库名.git git push -u origin main 配置 GitHub Pages： 访问你的 GitHub 仓库页面。 点击 Settings (设置)。 在左侧菜单中选择 Pages (页面)。 在 Source (来源) 部分，选择你的内容所在的分支（通常是 main 或 master），然后选择该分支的根目录 (/root) 作为部署来源。 点击 Save (保存)。 稍等片刻，GitHub Pages 就会部署你的网站，并通过生成的 URL 提供访问。 "},"chapter1/section2.html":{"url":"chapter1/section2.html","title":"第二节:GitHub Pages介绍","keywords":"","body":"GitHub 静态页面托管：从基础到极致，你能做到什么程度？ GitHub Pages 是由 GitHub 提供的免费静态网页托管服务，它允许你直接从你的 GitHub 仓库托管个人、组织或项目的网站。虽然名为“静态”页面，但其能做到的远不止展示几行简单的 HTML。从个人简历、项目文档到功能丰富的博客，甚至是部分电子商务的前端展示，GitHub Pages 的潜力超乎许多人的想象。本文将深入探讨 GitHub Pages 的功能、极限以及如何通过各种技巧将其能力发挥到极致。 核心能力：免费、稳定、易于上手的静态站点托管 作为一项免费服务，GitHub Pages 提供了强大的基础功能，非常适合开发者、学生和小型项目： 完全免费: 每个 GitHub 账户（包括免费账户）都可以为自己的公共仓库创建无限个项目站点，以及一个用户或组织站点。对于拥有 GitHub Pro、Team 或 Enterprise Cloud 的用户，还可以为私有仓库创建站点。 与 Git 无缝集成: 网站的每一次更新都与你的 Git 提交记录紧密相连，版本控制和协作变得异常简单。只需一次 git push，你的网站就能自动部署更新。 支持自定义域名: 你可以将自己的域名（例如 yourdomain.com）指向你的 GitHub Pages 站点，从而打造更专业的形象。 自动化的 HTTPS 支持: GitHub Pages 会为所有正确配置了自定义域名的网站自动颁发和续订 SSL/TLS 证书（通过 Let's Encrypt），确保你的网站能通过 HTTPS 安全访问。 内置 Jekyll 支持: Jekyll 是一个简单、支持博客的静态站点生成器。GitHub Pages 在后台原生支持 Jekyll，这意味着你可以直接在仓库中编写 Markdown 文件，Jekyll 会自动将其转换为一个完整的静态博客或网站。 GitHub Pages 能承载哪些类型的网站？ 凭借其核心功能，GitHub Pages 可以轻松胜任多种网站的搭建： 个人作品集和简历: 对于开发者、设计师或任何需要在线展示作品的人来说，GitHub Pages 是一个理想的选择。你可以创建一个简洁的页面来展示你的项目、技能和联系方式。 实例: emmabostian/developer-portfolios 这个 GitHub 仓库收集了大量优秀的开发者个人作品集，其中许多都托管在 GitHub Pages 上。 项目文档: 为你的开源项目或产品创建一个专业的文档网站。结合 Jekyll 或其他静态站点生成器，你可以轻松地将 Markdown 文档转换成结构清晰、易于导航的网站。 实例: 许多知名的开源项目，如 Bootstrap 和 Jekyll 自身的文档网站就是托管在 GitHub Pages 上的。 个人和团队博客: 利用 Jekyll 的原生支持，你可以快速搭建一个功能完善的博客，发布文章、管理分类和标签。 实例: 许多技术博主都选择使用 GitHub Pages + Jekyll 的组合来运营自己的博客，专注于内容创作。 小型企业或产品的营销和着陆页: 对于初创公司或新产品，使用 GitHub Pages 制作一个精美的营销着陆页是一种低成本且高效的方式。 超越“静态”：如何为你的 GitHub Pages 网站添加动态功能？ 虽然 GitHub Pages 本身不直接支持服务器端脚本（如 PHP, Python, Ruby 等）和数据库，但这并不意味着你的网站只能是完全静态的。通过集成第三方服务和利用前端技术，你可以为你的网站添加丰富的动态功能： 表单处理: Formspree 和 Netlify Forms 等服务允许你通过简单的 HTML 表单标签来接收表单提交。用户提交表单后，这些服务会将数据通过邮件发送给你或在其后台进行管理。你只需在你的 HTML 标签中指定一个由这些服务提供的 URL 即可。 评论系统: Disqus, Utterances 或 Giscus 等评论系统可以轻松嵌入到你的博客文章或任何页面中。这些系统通常通过一段 JavaScript 代码来加载一个功能齐全的评论区，并将评论数据存储在它们自己的服务器上。Utterances 和 Giscus 更是巧妙地利用 GitHub Issues 作为评论的后端，使得评论与你的仓库保持关联。 站内搜索: 可以利用 Algolia、Lunr.js 或 Simple-Jekyll-Search 等工具为你的网站添加搜索功能。这些工具通常会在你的网站构建时创建一个搜索索引文件，然后通过前端 JavaScript 来实现快速的客户端搜索。 电子商务: 虽然不能处理完整的后端交易逻辑，但你可以利用 Snipcart 或 Ecwid 等服务，通过在你的静态页面上添加特定的 HTML 属性和 JavaScript，来集成一个功能完善的购物车和支付系统。这使得在静态网站上销售商品成为可能。 自动化部署：使用 GitHub Actions 提升效率 GitHub Actions 是 GitHub 内置的持续集成和持续部署 (CI/CD) 工具。通过配置一个简单的工作流（workflow）文件，你可以让 GitHub 在你每次提交代码时自动完成一系列任务，例如： 使用任何静态站点生成器: 你不再局限于 Jekyll。无论是 Hugo, Next.js, Gatsby, VuePress 还是任何其他的静态站点生成器，你都可以通过 GitHub Actions 来构建你的网站，然后将生成的静态文件部署到 gh-pages 分支。 自动化测试: 在部署前自动运行代码检查、链接检查等测试，确保网站质量。 处理图片和资源: 自动压缩图片、编译 SASS/LESS 文件等，优化网站性能。 需要注意的限制 尽管功能强大，GitHub Pages 依然存在一些使用限制，了解这些限制有助于你更好地规划你的项目： 使用限制: 仓库大小: 推荐的仓库大小限制为 1 GB。 发布后的网站大小: 发布的网站大小不能超过 1 GB。 带宽: 每月有 100 GB 的“软性”带宽限制。 构建次数: 每小时有 10 次构建的“软性”限制（此限制不适用于使用自定义 GitHub Actions 工作流的部署）。 商业用途限制: GitHub Pages 不应用于运行在线业务、电子商务网站或主要用于促进商业交易或提供商业软件即服务 (SaaS) 的网站。但用于展示项目、作品集或产品信息是被允许的。 禁止敏感信息: 不应在 GitHub Pages 网站上处理密码、信用卡号等敏感交易。 总结 总而言之，GitHub Pages 的能力远超一个简单的静态页面托管服务。通过充分利用其核心功能、集成第三方服务以及强大的 GitHub Actions 自动化流程，你可以做到： 基础层面: 快速、免费地搭建个人主页、项目文档和博客。 进阶层面: 通过自定义域名和 HTTPS 提升专业形象，并利用 Jekyll 等工具高效管理内容。 高级层面: 突破“静态”的限制，通过集成第三方服务实现表单提交、评论、搜索甚至电子商务功能。 极致层面: 借助 GitHub Actions 实现高度自动化的开发和部署流程，使用任何你喜欢的前端框架和工具来构建复杂、高性能的静态网站。 对于希望以低成本、高效率方式在网络上建立自己一席之地的开发者和创意人士来说，GitHub Pages 无疑是一个值得深入探索和利用的强大工具。 "},"chapter2/":{"url":"chapter2/","title":"第二章：进阶","keywords":"","body":"第二章：进阶 "},"chapter2/instruction1.html":{"url":"chapter2/instruction1.html","title":"第一节:教程(macOS)","keywords":"","body":"第一节:教程(macOS) HonKit + GitHub Pages 快速部署与维护指南 本指南为个人备忘录，旨在记录如何使用 HonKit 和 GitHub Pages 快速创建、部署和维护一个在线文档/书籍网站。 场景：从零开始创建一个新的文档项目。 技术栈：HonKit, Node.js, npm, Git, GitHub Pages 作者：zimingcxt 一、🚀 新项目从零到一快速部署 此部分涵盖了从初始化项目到网站上线的完整流程。假设新项目名为 my-new-book。 第1步：本地项目初始化 在你的电脑上为新项目做好准备。 # 1. 在你喜欢的位置创建一个新的项目文件夹 mkdir my-new-book # 2. 进入该文件夹 (后续所有命令都在此文件夹内执行) cd my-new-book # 3. 初始化 npm 项目，生成 package.json 文件 (-y 表示全部使用默认配置) npm init -y # 4. 安装 HonKit 和部署工具 gh-pages # HonKit 是核心工具，gh-pages 用于一键部署到 GitHub Pages npm install honkit gh-pages --save-dev # 5. 创建书籍的基础文件 # README.md 是书籍的前言或主页 echo \"# 我的新书\" > README.md # SUMMARY.md 是书籍的目录文件，至关重要 echo \"# 目录\\n\\n* [前言](README.md)\\n* [第一章](chapter1.md)\" > SUMMARY.md # 6. 使用 HonKit 自动生成目录中定义的文件结构 # HonKit 会读取 SUMMARY.md 并创建对应的 chapter1.md 文件 honkit init # 7. (可选) 本地预览，检查效果 # 在浏览器打开 http://localhost:4000 查看 honkit serve 第2步：在 package.json 中配置部署命令 这是实现“一键部署”的关键。打开项目中的 package.json 文件，找到 \"scripts\" 部分，添加 \"deploy\" 命令。 // package.json { \"name\": \"my-new-book\", // 这里会是你项目文件夹的名字 \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { // 在这里添加 deploy 命令 // \"deploy\": \"gh-pages -d _book\" // -d _book 的意思是将 _book 文件夹里的内容部署上去 \"deploy\": \"gh-pages -d _book\", \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"devDependencies\": { // 这里是你安装的开发依赖 \"gh-pages\": \"^6.3.0\", \"honkit\": \"^3.7.3\" // 版本号可能不同 } } 第3步：在 GitHub 创建并关联远程仓库 登录 GitHub，创建一个新的 Public 仓库，仓库名建议与项目名一致（例如 my-new-book）。 不要勾选任何初始化选项（如 README, .gitignore）。 创建后，复制仓库的 HTTPS 地址（例如 https://github.com/zimingcxt/my-new-book.git）。 # 1. 初始化本地 Git 仓库 git init # 2. 关联到你刚刚在 GitHub 创建的远程仓库 (注意替换 URL) git remote add origin [https://github.com/zimingcxt/my-new-book.git](https://github.com/zimingcxt/my-new-book.git) # 3. 将源码推送到 GitHub 的 main 分支进行备份 # 这一步不是部署网站，而是备份你的 Markdown 源文件 git add . git commit -m \"feat: initial project setup\" git push -u origin main 第4步：执行部署 现在，你只需要一条命令就可以把网站发布出去。 # 1. 首先，用 HonKit 构建静态网站文件，生成 _book 文件夹 honkit build # 2. 然后，执行你在 package.json 中定义的 deploy 脚本 npm run deploy 执行后，gh-pages 工具会自动创建一个 gh-pages 分支，并将 _book 文件夹的内容推送到这个分支上。 第5步：配置 GitHub Pages 进入你 GitHub 上的 my-new-book 仓库页面。 点击 Settings -> Pages。 在 Build and deployment 下，将 Source 设置为 Deploy from a branch。 在 Branch 部分，选择 gh-pages 分支，文件夹选择 /(root)。 点击 Save。 等待几分钟后，你的新网站就可以通过 https://zimingcxt.github.io/my-new-book/ 访问了。 二、✍️ 日常维护：快捷添加目录和文章 完成首次部署后，日常更新流程非常简单和高效。 流程概览 修改目录 -> 创建文件 -> 编写内容 -> 提交 -> 部署 详细步骤 # 1. 修改目录文件 SUMMARY.md # 比如，我们想在第一章下增加一个子章节，并添加第二章 # 用 VS Code 打开 SUMMARY.md，修改后内容如下： # # # 目录 # # * [前言](README.md) # * [第一章：基础](chapter1.md) # * [第一节：核心概念](c1/section1.md) # * [第二章：进阶](chapter2.md) # # 2. 自动创建文件 # 保存 SUMMARY.md 后，运行 honkit init，它会自动创建 c1/section1.md 和 chapter2.md honkit init # 3. 编写你的新文章 # 用 VS Code 打开刚刚创建的 c1/section1.md 和 chapter2.md，开始写作... # 4. (可选) 本地预览 honkit serve # 5. 提交源码变更到 GitHub # 这是个好习惯，可以备份你的每一次修改 git add . git commit -m \"docs: add chapter 2 and section 1.1\" # commit 信息尽量写清楚 git push origin main # 6. 重新构建并部署到线上 honkit build npm run deploy 完成！几分钟后，你网站上的内容就会更新。 三、⚙️ (进阶) 使用 book.json 进行个性化配置 在项目根目录下创建一个 book.json 文件，可以用来配置书名、作者、插件等。 book.json 示例 // book.json { // 书本的标题，会显示在网站的左上角 \"title\": \"我的新一代神书\", // 作者 \"author\": \"zimingcxt\", // 书本的描述 \"description\": \"这是一本关于...的划时代巨著\", // 使用的 HonKit 版本，建议锁定以保证兼容性 \"gitbook\": \"3.7.3\", // 插件列表 // HonKit 默认带了一些插件，如 search, sharing, fontsettings // 你可以在这里添加更多插件，比如代码高亮 \"plugins\": [ \"-sharing\", // 负号表示禁用默认的 sharing 插件 \"prism\", // 添加 prism 插件用于代码高亮 \"prism-themes\" // prism 的主题插件 ], // 针对插件的详细配置 \"pluginsConfig\": { \"prism\": { \"css\": [ // 选择一个你喜欢的主题样式 \"prismjs/themes/prism-tomorrow.css\" ] } } } 如何使用带插件的配置 在 book.json 中添加插件名。 使用 npm 安装插件，例如：npm install honkit-plugin-prism prism-themes --save-dev。 重新运行 honkit install (如果需要) 或直接 honkit build，HonKit 会自动加载插件。 "},"chapter2/instruction2.html":{"url":"chapter2/instruction2.html","title":"第二节:教程(Windows)","keywords":"","body":"第二节:教程(Windows) 本指南为个人备忘录，旨在记录如何使用 HonKit 和 GitHub Pages 在 Windows 系统上快速创建、部署和维护一个在线文档/书籍网站。 先决条件：请确保你的 Windows 系统已安装以下软件： Node.js (会自动包含 npm) Git for Windows Visual Studio Code (推荐) 技术栈：HonKit, Node.js, npm, Git, GitHub Pages 作者：zimingcxt 一、🚀 新项目从零到一快速部署 此部分涵盖了从初始化项目到网站上线的完整流程。假设新项目名为 my-new-book。 第1步：本地项目初始化 在你的电脑上为新项目做好准备。打开“命令提示符(CMD)”或“PowerShell”来执行以下命令。 :: 1. 在你喜欢的位置创建一个新的项目文件夹 (例如 D:\\projects) mkdir my-new-book :: 2. 进入该文件夹 (后续所有命令都在此文件夹内执行) cd my-new-book :: 3. 初始化 npm 项目，生成 package.json 文件 (-y 表示全部使用默认配置) npm init -y :: 4. 安装 HonKit 和部署工具 gh-pages :: HonKit 是核心工具，gh-pages 用于一键部署到 GitHub Pages npm install honkit gh-pages --save-dev 第2步：创建书籍的基础文件 (Windows 推荐方式) 我们推荐直接使用 VS Code 或记事本手动创建文件，这样可以避免不同命令行工具的兼容性问题。 在 my-new-book 文件夹中，手动创建一个名为 README.md 的文件，并粘贴以下内容： Markdown # 我的新书 同样，手动创建一个名为 SUMMARY.md 的文件，并粘贴以下内容： Markdown # 目录 * [前言](README.md) * [第一章](chapter1.md) 第3步：生成、预览项目 创建好以上两个文件后，回到命令行工具继续执行。 DOS :: 1. 使用 HonKit 自动生成目录中定义的文件结构 :: HonKit 会读取 SUMMARY.md 并创建对应的 chapter1.md 文件 honkit init :: 2. (可选) 本地预览，检查效果 :: 在浏览器打开 http://localhost:4000 查看 需要先执行: honkit serve 第4步：在 package.json 中配置部署命令 此步骤与 macOS 完全相同。这是实现“一键部署”的关键。打开项目中的 package.json 文件，找到 \"scripts\"部分，添加 \"deploy\" 命令。 JSON // package.json { \"name\": \"my-new-book\", // 这里会是你项目文件夹的名字 \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { // 在这里添加 deploy 命令 // \"deploy\": \"gh-pages -d _book\" // -d _book 的意思是将 _book 文件夹里的内容部署上去 \"deploy\": \"gh-pages -d _book\", \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"devDependencies\": { // 这里是你安装的开发依赖 \"gh-pages\": \"^6.3.0\", \"honkit\": \"^3.7.3\" // 版本号可能不同 } } 第5步：在 GitHub 创建并关联远程仓库 此步骤与 macOS 完全相同。 登录 GitHub，创建一个新的 **Public 仓库，仓库名建议与项目名一致（例如 **my-new-book）。 不要勾选任何初始化选项（如 README, .gitignore）。 创建后，复制仓库的 HTTPS 地址（例如 https://github.com/zimingcxt/my-new-book.git）。 Bash :: 1. 初始化本地 Git 仓库 git init :: 2. 关联到你刚刚在 GitHub 创建的远程仓库 (注意替换 URL) git remote add origin https://github.com/zimingcxt/my-new-book.git :: 3. 将源码推送到 GitHub 的 main 分支进行备份 :: 这一步不是部署网站，而是备份你的 Markdown 源文件 git add . git commit -m \"feat: initial project setup\" git push -u origin main 第6步：执行部署 此步骤与 macOS 完全相同。 DOS :: 1. 首先，用 HonKit 构建静态网站文件，生成 _book 文件夹 honkit build :: 2. 然后，执行你在 package.json 中定义的 deploy 脚本 npm run deploy 执行后，gh-pages 工具会自动创建一个 gh-pages 分支，并将 _book 文件夹的内容推送到这个分支上。 第7步：配置 GitHub Pages 此步骤与 macOS 完全相同，全程在 GitHub 网站上操作。 进入你 GitHub 上的 my-new-book 仓库页面。 点击 Settings -> Pages。 在 Build and deployment 下，将 Source 设置为 Deploy from a branch。 在 Branch 部分，选择 gh-pages 分支，文件夹选择 /(root)。 点击 Save。 等待几分钟后，你的新网站就可以通过 https://zimingcxt.github.io/my-new-book/ 访问了。 二、✍️ 日常维护：快捷添加目录和文章 此部分工作流与 macOS 完全相同。 流程概览 修改目录 -> 创建文件 -> 编写内容 -> 提交 -> 部署 详细步骤 DOS :: 1. 修改目录文件 SUMMARY.md :: 比如，我们想在第一章下增加一个子章节，并添加第二章 :: 用 VS Code 打开 SUMMARY.md，修改后内容如下： :: :: # 目录 :: :: * [前言](README.md) :: * [第一章：基础](chapter1.md) :: * [第一节：核心概念](c1/section1.md) :: * [第二章：进阶](chapter2.md) :: :: 2. 自动创建文件 :: 保存 SUMMARY.md 后，运行 honkit init，它会自动创建 c1/section1.md 和 chapter2.md honkit init :: 3. 编写你的新文章 :: 用 VS Code 打开刚刚创建的 c1/section1.md 和 chapter2.md，开始写作... :: 4. (可选) 本地预览 honkit serve :: 5. 提交源码变更到 GitHub :: 这是个好习惯，可以备份你的每一次修改 git add . git commit -m \"docs: add chapter 2 and section 1.1\" git push origin main :: 6. 重新构建并部署到线上 honkit build npm run deploy 完成！几分钟后，你网站上的内容就会更新。 三、⚙️ (进阶) 使用 book.json 进行个性化配置 此部分与 macOS 完全相同。在项目根目录下创建一个 book.json 文件，可以用来配置书名、作者、插件等。 book.json 示例 JSON // book.json { // 书本的标题，会显示在网站的左上角 \"title\": \"我的新一代神书\", // 作者 \"author\": \"zimingcxt\", // 书本的描述 \"description\": \"这是一本关于...的划时代巨著\", // 使用的 HonKit 版本，建议锁定以保证兼容性 \"gitbook\": \"3.7.3\", // 插件列表 // HonKit 默认带了一些插件，如 search, sharing, fontsettings // 你可以在这里添加更多插件，比如代码高亮 \"plugins\": [ \"-sharing\", // 负号表示禁用默认的 sharing 插件 \"prism\", // 添加 prism 插件用于代码高亮 \"prism-themes\" // prism 的主题插件 ], // 针对插件的详细配置 \"pluginsConfig\": { \"prism\": { \"css\": [ // 选择一个你喜欢的主题样式 \"prismjs/themes/prism-tomorrow.css\" ] } } } 如何使用带插件的配置 在 book.json 中添加插件名。 使用 npm 安装插件，例如：npm install honkit-plugin-prism prism-themes --save-dev。 重新运行 honkit install (如果需要) 或直接 honkit build，HonKit 会自动加载插件。 "},"chapter2/instruction3.html":{"url":"chapter2/instruction3.html","title":"第三节:如何多设备编辑","keywords":"","body":"如何多设备编辑 在其他电脑上继续更新 HonKit 项目是一个常见的流程。如果这台新电脑上没有安装 HonKit ,可以看下面的配制方法(部分内容和前几节有重复): 目标分为两步： 搭建环境：在新电脑上安装所需的基础软件。 同步和更新：把 GitHub 上的书籍源文件弄下来，然后进行更新。 下面是详细的步骤，跟着做就可以了： 第 1 步：安装必备的开发环境 你的 HonKit 项目是基于 Node.js 的，并且代码存放在 GitHub 上。所以，你需要两个核心工具：Node.js 和 Git。 安装 Git 作用：Git 是一个版本控制工具，用来从 GitHub 上下载（克隆）你的代码，并在你更新后上传（推送）回去。 如何安装：访问 Git 官网下载页面，根据你的操作系统（Windows, macOS, Linux）下载并安装。安装时一路选择默认选项即可。 安装 Node.js 和 npm 作用：HonKit 本身是一个 Node.js 包，需要 Node.js 环境来运行。npm 是 Node.js 的包管理器，随 Node.js 一起安装，用来帮你安装 HonKit。 如何安装：访问 Node.js 官网，推荐下载左侧的 LTS (长期支持版)，它最稳定。下载后双击安装，同样一路默认即可。 安装完成后，可以打开终端（在 Windows 上是 CMD 或 PowerShell，在 macOS 上是 Terminal）输入以下命令来检查是否安装成功： Bash git --version node -v npm -v 如果都显示了版本号，说明环境已经准备好了。 第 2 步：从 GitHub 克隆你的书籍源文件 现在，我们要把云端（GitHub）的代码库复制到你的本地电脑上。 打开终端 (Command Prompt, PowerShell, or Terminal)。 导航到一个你希望存放项目的文件夹，比如桌面或文档文件夹。 Bash # 例如，进入桌面 cd Desktop 克隆仓库。使用 git clone 命令加上你的仓库地址。根据你提供的网址，你的仓库地址应该是(这里用我的作为示例) https://github.com/zimingcxt/book-1.git。 Bash git clone https://github.com/zimingcxt/book-1.git 执行后，Git 会自动创建一个名为 book-1 的文件夹，并把所有代码下载到里面。 进入项目目录。 Bash cd book-1 第 3 步：安装 HonKit 和项目依赖 进入项目文件夹后，你会发现里面应该有一个叫 package.json 的文件，它记录了项目需要的所有依赖（包括 HonKit）。 在终端里（确保你仍然在 book-1 文件夹下），运行以下命令： Bash npm install 这个命令会读取 package.json 文件，并自动下载安装 HonKit 以及其他可能需要的全部依赖项。这比手动在全局安装 HonKit 要好，因为它可以确保项目环境的一致性。 第 4 步：本地预览和修改内容 现在你的电脑已经拥有了和之前完全一样的开发环境和代码了。 修改你的书籍内容：用你喜欢的代码编辑器（如 VS Code）打开 book-1 文件夹。根据 HonKit 的结构，你可以修改 .md (Markdown) 文件来更新你的书籍内容。 在本地预览效果：修改后，想看看网站实际长什么样，可以运行以下命令： Bash npx honkit serve 这条命令会启动一个本地服务器，终端会提示你网站正在运行，通常地址是 http://localhost:4000。在浏览器里打开这个地址，你就能看到你的书了，并且你对文件的任何修改都会自动刷新，非常方便。 第 5 步：发布你的更新 当你对修改感到满意，并准备好将更新发布到 https://zimingcxt.github.io/book-1 时，遵循以下 Git 流程： 构建静态文件（这一步取决于你的 GitHub Pages 配置，但通常是好习惯）： Bash npx honkit build 这会把你的 Markdown 文件生成为最终的 HTML 文件，通常放在一个叫 _book 的文件夹里。 将改动提交到 Git。 Bash # 1. 添加所有文件的改动到暂存区 git add . # 2. 创建一个提交记录，并写上本次更新的说明 git commit -m \"这里写你的更新说明，比如：更新了第二章内容\" # 3. 推送你的提交到 GitHub 云端 git push 推送成功后，GitHub Pages 会自动开始部署你的新版本，通常等待一两分钟，刷新你的线上网址就能看到更新了！ 总结一下你的日常更新流程： 修改 .md 文件。 运行 npx honkit serve 在本地实时预览。 满意后，按 Ctrl + C 停止本地服务器。 运行 git add . -> git commit -m \"更新说明\" -> git push。 等待几分钟，线上网站更新完成。 这样，你就可以在任何电脑上愉快地更新你的 HonKit 网站了。 "},"chapter2/instruction4.html":{"url":"chapter2/instruction4.html","title":"第四节:一些小问题","keywords":"","body":"1.应用到 Cloudflare Pages 将项目部署到 Cloudflare Pages 非常简单，而且性能通常比 GitHub Pages 更好。 请按照以下步骤操作： 登录 Cloudflare：打开你的 Cloudflare 仪表板。 进入 Pages：在左侧菜单中，选择 Workers & Pages，然后点击 Create application。 连接到 Git：选择 Pages 标签页，然后点击 Connect to Git。 授权并选择仓库： 如果你是第一次使用，需要授权 Cloudflare 访问你的 GitHub 账户。 在仓库列表中，找到并选择你的 zimingcxt/book-1 仓库。然后点击 Begin setup。 设置构建和部署 (最关键的一步)： Project name：项目名称，可以保持默认 (book-1)。 Production branch：选择你的主分支（通常是 main 或 master）。 Framework preset：框架预设，选择 None。因为 HonKit 不是标准预设。 Build settings：配置构建信息。 Build command (构建命令):npx honkit build Build output directory (构建输出目录):_book Environment variables (optional) (环境变量 - 可选但建议): 点击 Add variable。 Variable name: NODE_VERSION Value: 18 或 20 (确保 Cloudflare 使用一个较新的 Node.js 版本来构建) 你的设置界面看起来应该是这样： 保存并部署： 点击 Save and Deploy。 Cloudflare 会开始从你的 GitHub 仓库拉取代码，运行你设置的构建命令 (npx honkit build)，然后将生成的 _book 目录部署到全球网络。 完成后，Cloudflare 会提供给你一个 *.pages.dev 的网址，那就是你的新网站地址！以后你每次向 GitHub 的 main 分支推送更新，Cloudflare 都会自动帮你重新构建和部署，非常方便。 2.快速发布 已安装gh-pages 工具自动化部署的情况下,只需要: 确保 gh-pages 已安装（我们之前的步骤已经装过，这里是确认）： Bash npm install gh-pages --save-dev 在 package.json 中添加部署脚本： 打开 package.json 文件，在 \"scripts\" 部分添加一行 \"deploy\"： JSON \"scripts\": { \"serve\": \"honkit serve\", \"build\": \"honkit build\", \"deploy\": \"gh-pages -d _book\" }, 一键部署：现在，你只需要按顺序运行两个命令： Bash # 第一步：构建最新的网站文件 npm run build # 第二步：将构建好的 _book 文件夹部署到 gh-pages 分支 npm run deploy 运行 npm run deploy 后，它会自动帮你处理所有 Git 操作。等待几分钟，你的 GitHub Pages 网站就会更新了。 3.插件冲突 当前插件存在冲突,如下: { \"title\": \"我的一本书\", \"author\": \"zimingcxt\", \"description\": \"这是一本没什么用的笔记\", \"gitbook\": \"3.7.3\", \"plugins\": [ \"-sharing\",//国内用处不大,而且使页面复杂化 \"collapsible-chapters\", \"search-plus\", \"-search\",//替换为上面search-plus插件,但看起来没什么区别 \"back-to-top-button\", \"toc\", //目录插件,原先的simple-page-toc莫名用不了,替换为正文内插入目录(插入方式见4.目录插入) \"fontsettings\", \"code\", \"-splitter\",//和其他共存会出现内容右移bug \"prism\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prismjs/themes/prism-tomorrow.css\" ] } } } 4.目录插入 插入方式,在想要的位置(一般在标题下方)输入即可: "}}